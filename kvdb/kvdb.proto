syntax = "proto3";

package kvdb;

option go_package = "ds-storage/src/kvdb";

service KeyValueDB {
  rpc BatchSubmit(BatchSubmitArgs) returns (BatchSubmitReply);
}

message BatchSubmitArgs {
  OpWrapper Wrapper = 1;
  bool      Readonly = 2;
}

// A high-level wrapper which contains mini-transactions from multiple users
message OpWrapper {
  int64     Count = 1;
  // WrapperId and ForwarderId is used to uniquely identify an OpWrapper
  int64     ForwarderId = 2;
  int64     WrapperId = 3;
  repeated  Transaction Transactions = 4;
}

//  An atomic unit of operations.
//  Transaction with different TableId will be applied concurrently.
//  A table should not contain too much data.
//  ClientId and TransactionId is used to provide exactly-once semantic:
//  once we receive a TransactionId from a client,
//  all requests with smaller TransactionId will be rejected.
//  Server only saves the last transaction result for each client,
//  and clients should send transactions one by one.
message Transaction {
  string            ClientId = 1;
  int64             TransactionId = 2;
  string            TableId = 3;
  repeated AnyOp    Ops = 4;
  int64             TableVersionExpected = 5;
  int64             TimeStamp = 6;
}

message AnyOp {
  string            Type = 1;
  repeated string   LookupKey = 2;
  string            Key = 3;
  AnyValue          Value = 4;
  string            Alias = 5;
  // To ignore FieldVersionExpected, set it to -1
  int64             FieldVersionExpected = 6;
  TableOp           TableOps = 7;
  OnFailOption      OnFail = 8;
}

message AnyValue {
  string                 Type    = 1;
  repeated AnyValue      List    = 2;
  map<string, AnyValue>  Map     = 3;
  string                 Str     = 4;
  int64                  Num     = 5;
  bytes                  Bin     = 6;
  int64                  Version = 7;
}

// TableOp is a special Op that will be applied at db level.
// TableOp must be piggybacked in the first op in a transaction.
message TableOp {
  CreateTableOption Option = 1;
  bool              ErrIfExists = 2;
}

enum CreateTableOption {
  UseTransactionTableId = 0;
  // not yet implemented
  UseRandomUniqueId     = 1;
}

enum OnFailOption {
  Rollback              = 0;
  Abort                 = 1;
  Continue              = 2;
}

message BatchSubmitReply {
  bool           OK = 1;
  string         TalkTo = 2;
  WrapperResult  Result = 3;
  bool           InternalError = 4;
  int64          DebugProposalId = 5;
}

message AliasValue {
  bool      IsNull = 1;
  AnyValue  Value = 2;
}

message TransactionResult {
  int64 TransactionId = 1;
  StatusCode Status = 2;
  map<string, AliasValue> Values = 3;
  string Message = 4;
  int64 TableVersion = 5;
  enum StatusCode {
    OK = 0;
    TableNotExists = 1;
    TableAlreadyExists = 2;
    NotExpectedTableVersion = 3;
    TypeAssertionFailed = 4;
    UserAssumptionFailed = 5;
    NotExpectedValueVersion = 6;
    TooLate = 7;
    Unknown = 11;
  }
}

message WrapperResult {
  repeated TransactionResult TransactionResults = 1;
}

