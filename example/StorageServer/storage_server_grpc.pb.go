// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package StorageServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	RegisterUserRead(ctx context.Context, in *RegUserReadArgs, opts ...grpc.CallOption) (*RegUserReadReply, error)
	UploadFileInit(ctx context.Context, in *UploadInitArgs, opts ...grpc.CallOption) (*UploadInitReply, error)
	UploadFileFinish(ctx context.Context, in *UploadFinishArgs, opts ...grpc.CallOption) (*UploadFinishReply, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) RegisterUserRead(ctx context.Context, in *RegUserReadArgs, opts ...grpc.CallOption) (*RegUserReadReply, error) {
	out := new(RegUserReadReply)
	err := c.cc.Invoke(ctx, "/StorageServer.FileService/RegisterUserRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadFileInit(ctx context.Context, in *UploadInitArgs, opts ...grpc.CallOption) (*UploadInitReply, error) {
	out := new(UploadInitReply)
	err := c.cc.Invoke(ctx, "/StorageServer.FileService/UploadFileInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadFileFinish(ctx context.Context, in *UploadFinishArgs, opts ...grpc.CallOption) (*UploadFinishReply, error) {
	out := new(UploadFinishReply)
	err := c.cc.Invoke(ctx, "/StorageServer.FileService/UploadFileFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	RegisterUserRead(context.Context, *RegUserReadArgs) (*RegUserReadReply, error)
	UploadFileInit(context.Context, *UploadInitArgs) (*UploadInitReply, error)
	UploadFileFinish(context.Context, *UploadFinishArgs) (*UploadFinishReply, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) RegisterUserRead(context.Context, *RegUserReadArgs) (*RegUserReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserRead not implemented")
}
func (UnimplementedFileServiceServer) UploadFileInit(context.Context, *UploadInitArgs) (*UploadInitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileInit not implemented")
}
func (UnimplementedFileServiceServer) UploadFileFinish(context.Context, *UploadFinishArgs) (*UploadFinishReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileFinish not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&_FileService_serviceDesc, srv)
}

func _FileService_RegisterUserRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegUserReadArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RegisterUserRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageServer.FileService/RegisterUserRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RegisterUserRead(ctx, req.(*RegUserReadArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadFileInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadInitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UploadFileInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageServer.FileService/UploadFileInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UploadFileInit(ctx, req.(*UploadInitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadFileFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFinishArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UploadFileFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageServer.FileService/UploadFileFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UploadFileFinish(ctx, req.(*UploadFinishArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StorageServer.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUserRead",
			Handler:    _FileService_RegisterUserRead_Handler,
		},
		{
			MethodName: "UploadFileInit",
			Handler:    _FileService_UploadFileInit_Handler,
		},
		{
			MethodName: "UploadFileFinish",
			Handler:    _FileService_UploadFileFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_server.proto",
}
