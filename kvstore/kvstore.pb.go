// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: kvstore.proto

package kvstore

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OpType int32

const (
	OpType_Get        OpType = 0
	OpType_Put        OpType = 1
	OpType_MapStore   OpType = 2
	OpType_MapDelete  OpType = 3
	OpType_Check      OpType = 4
	OpType_ListAppend OpType = 5
	OpType_ListPop    OpType = 6
	OpType_RangeQuery OpType = 7
	// These ops do not follow transaction's atomicity & isolation.
	// That is to say, they are applied independently and even
	// the transaction fails, these ops can take effect.
	OpType_CreateDocument   OpType = 16
	OpType_DeleteDocument   OpType = 17
	OpType_CreateCollection OpType = 30
	OpType_DeleteCollection OpType = 31
	// You can do string hash on a field, value = base64(sha512(old+new))
	// to check consistency and find out
	// potential bugs.
	OpType_DoStrHash OpType = 127
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0:   "Get",
		1:   "Put",
		2:   "MapStore",
		3:   "MapDelete",
		4:   "Check",
		5:   "ListAppend",
		6:   "ListPop",
		7:   "RangeQuery",
		16:  "CreateDocument",
		17:  "DeleteDocument",
		30:  "CreateCollection",
		31:  "DeleteCollection",
		127: "DoStrHash",
	}
	OpType_value = map[string]int32{
		"Get":              0,
		"Put":              1,
		"MapStore":         2,
		"MapDelete":        3,
		"Check":            4,
		"ListAppend":       5,
		"ListPop":          6,
		"RangeQuery":       7,
		"CreateDocument":   16,
		"DeleteDocument":   17,
		"CreateCollection": 30,
		"DeleteCollection": 31,
		"DoStrHash":        127,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_kvstore_proto_enumTypes[0].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_kvstore_proto_enumTypes[0]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{0}
}

type ValueType int32

const (
	ValueType_String    ValueType = 0
	ValueType_Number    ValueType = 1
	ValueType_List      ValueType = 2
	ValueType_HashMap   ValueType = 3
	ValueType_Alias     ValueType = 4
	ValueType_Binary    ValueType = 11
	ValueType_Undefined ValueType = 31
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0:  "String",
		1:  "Number",
		2:  "List",
		3:  "HashMap",
		4:  "Alias",
		11: "Binary",
		31: "Undefined",
	}
	ValueType_value = map[string]int32{
		"String":    0,
		"Number":    1,
		"List":      2,
		"HashMap":   3,
		"Alias":     4,
		"Binary":    11,
		"Undefined": 31,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_kvstore_proto_enumTypes[1].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_kvstore_proto_enumTypes[1]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{1}
}

type OnFailOption int32

const (
	OnFailOption_Rollback OnFailOption = 0
	OnFailOption_Abort    OnFailOption = 1
	OnFailOption_Continue OnFailOption = 2
)

// Enum value maps for OnFailOption.
var (
	OnFailOption_name = map[int32]string{
		0: "Rollback",
		1: "Abort",
		2: "Continue",
	}
	OnFailOption_value = map[string]int32{
		"Rollback": 0,
		"Abort":    1,
		"Continue": 2,
	}
)

func (x OnFailOption) Enum() *OnFailOption {
	p := new(OnFailOption)
	*p = x
	return p
}

func (x OnFailOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnFailOption) Descriptor() protoreflect.EnumDescriptor {
	return file_kvstore_proto_enumTypes[2].Descriptor()
}

func (OnFailOption) Type() protoreflect.EnumType {
	return &file_kvstore_proto_enumTypes[2]
}

func (x OnFailOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnFailOption.Descriptor instead.
func (OnFailOption) EnumDescriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{2}
}

type TransactionResult_StatusCode int32

const (
	TransactionResult_OK                         TransactionResult_StatusCode = 0
	TransactionResult_CollectionNotFound         TransactionResult_StatusCode = 1
	TransactionResult_DocumentNotFound           TransactionResult_StatusCode = 2
	TransactionResult_CollectionAlreadyExists    TransactionResult_StatusCode = 3
	TransactionResult_DocumentAlreadyExists      TransactionResult_StatusCode = 4
	TransactionResult_NotExpectedDocumentVersion TransactionResult_StatusCode = 5
	TransactionResult_TypeAssertionFailed        TransactionResult_StatusCode = 6
	TransactionResult_UserAssumptionFailed       TransactionResult_StatusCode = 7
	TransactionResult_NotExpectedFieldVersion    TransactionResult_StatusCode = 8
	TransactionResult_RequestTooLate             TransactionResult_StatusCode = 9
	TransactionResult_Aborted                    TransactionResult_StatusCode = 10
	TransactionResult_Unknown                    TransactionResult_StatusCode = 31
)

// Enum value maps for TransactionResult_StatusCode.
var (
	TransactionResult_StatusCode_name = map[int32]string{
		0:  "OK",
		1:  "CollectionNotFound",
		2:  "DocumentNotFound",
		3:  "CollectionAlreadyExists",
		4:  "DocumentAlreadyExists",
		5:  "NotExpectedDocumentVersion",
		6:  "TypeAssertionFailed",
		7:  "UserAssumptionFailed",
		8:  "NotExpectedFieldVersion",
		9:  "RequestTooLate",
		10: "Aborted",
		31: "Unknown",
	}
	TransactionResult_StatusCode_value = map[string]int32{
		"OK":                         0,
		"CollectionNotFound":         1,
		"DocumentNotFound":           2,
		"CollectionAlreadyExists":    3,
		"DocumentAlreadyExists":      4,
		"NotExpectedDocumentVersion": 5,
		"TypeAssertionFailed":        6,
		"UserAssumptionFailed":       7,
		"NotExpectedFieldVersion":    8,
		"RequestTooLate":             9,
		"Aborted":                    10,
		"Unknown":                    31,
	}
)

func (x TransactionResult_StatusCode) Enum() *TransactionResult_StatusCode {
	p := new(TransactionResult_StatusCode)
	*p = x
	return p
}

func (x TransactionResult_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionResult_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_kvstore_proto_enumTypes[3].Descriptor()
}

func (TransactionResult_StatusCode) Type() protoreflect.EnumType {
	return &file_kvstore_proto_enumTypes[3]
}

func (x TransactionResult_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionResult_StatusCode.Descriptor instead.
func (TransactionResult_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{9, 0}
}

type BatchReadArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	// Read-only Transactions
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *BatchReadArgs) Reset() {
	*x = BatchReadArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReadArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReadArgs) ProtoMessage() {}

func (x *BatchReadArgs) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReadArgs.ProtoReflect.Descriptor instead.
func (*BatchReadArgs) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{0}
}

func (x *BatchReadArgs) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BatchReadArgs) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type BatchReadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLeader      bool                 `protobuf:"varint,1,opt,name=IsLeader,proto3" json:"IsLeader,omitempty"`
	LeaderNp      int64                `protobuf:"varint,2,opt,name=LeaderNp,proto3" json:"LeaderNp,omitempty"`
	HighestNpSeen int64                `protobuf:"varint,3,opt,name=HighestNpSeen,proto3" json:"HighestNpSeen,omitempty"`
	Results       []*TransactionResult `protobuf:"bytes,4,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *BatchReadReply) Reset() {
	*x = BatchReadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReadReply) ProtoMessage() {}

func (x *BatchReadReply) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReadReply.ProtoReflect.Descriptor instead.
func (*BatchReadReply) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{1}
}

func (x *BatchReadReply) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *BatchReadReply) GetLeaderNp() int64 {
	if x != nil {
		return x.LeaderNp
	}
	return 0
}

func (x *BatchReadReply) GetHighestNpSeen() int64 {
	if x != nil {
		return x.HighestNpSeen
	}
	return 0
}

func (x *BatchReadReply) GetResults() []*TransactionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchSubmitArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count         int64          `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Transactions  []*Transaction `protobuf:"bytes,2,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	BatchSubmitId int64          `protobuf:"varint,3,opt,name=BatchSubmitId,proto3" json:"BatchSubmitId,omitempty"`
}

func (x *BatchSubmitArgs) Reset() {
	*x = BatchSubmitArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSubmitArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSubmitArgs) ProtoMessage() {}

func (x *BatchSubmitArgs) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSubmitArgs.ProtoReflect.Descriptor instead.
func (*BatchSubmitArgs) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{2}
}

func (x *BatchSubmitArgs) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BatchSubmitArgs) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BatchSubmitArgs) GetBatchSubmitId() int64 {
	if x != nil {
		return x.BatchSubmitId
	}
	return 0
}

type BatchSubmitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OK                 bool                 `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	TalkTo             string               `protobuf:"bytes,2,opt,name=TalkTo,proto3" json:"TalkTo,omitempty"`
	TransactionResults []*TransactionResult `protobuf:"bytes,3,rep,name=TransactionResults,proto3" json:"TransactionResults,omitempty"`
	InternalError      bool                 `protobuf:"varint,4,opt,name=InternalError,proto3" json:"InternalError,omitempty"`
}

func (x *BatchSubmitReply) Reset() {
	*x = BatchSubmitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSubmitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSubmitReply) ProtoMessage() {}

func (x *BatchSubmitReply) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSubmitReply.ProtoReflect.Descriptor instead.
func (*BatchSubmitReply) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{3}
}

func (x *BatchSubmitReply) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

func (x *BatchSubmitReply) GetTalkTo() string {
	if x != nil {
		return x.TalkTo
	}
	return ""
}

func (x *BatchSubmitReply) GetTransactionResults() []*TransactionResult {
	if x != nil {
		return x.TransactionResults
	}
	return nil
}

func (x *BatchSubmitReply) GetInternalError() bool {
	if x != nil {
		return x.InternalError
	}
	return false
}

//  An atomic unit of operations.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ops                []*AnyOp `protobuf:"bytes,1,rep,name=Ops,proto3" json:"Ops,omitempty"`
	TxnTimestamp       int64    `protobuf:"varint,2,opt,name=TxnTimestamp,proto3" json:"TxnTimestamp,omitempty"`
	LocalUnixTimestamp int64    `protobuf:"varint,3,opt,name=LocalUnixTimestamp,proto3" json:"LocalUnixTimestamp,omitempty"`
	ClientIdentifier   string   `protobuf:"bytes,4,opt,name=ClientIdentifier,proto3" json:"ClientIdentifier,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetOps() []*AnyOp {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *Transaction) GetTxnTimestamp() int64 {
	if x != nil {
		return x.TxnTimestamp
	}
	return 0
}

func (x *Transaction) GetLocalUnixTimestamp() int64 {
	if x != nil {
		return x.LocalUnixTimestamp
	}
	return 0
}

func (x *Transaction) GetClientIdentifier() string {
	if x != nil {
		return x.ClientIdentifier
	}
	return ""
}

type AnyOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         OpType    `protobuf:"varint,1,opt,name=Type,proto3,enum=kvstore.OpType" json:"Type,omitempty"`
	CollectionId string    `protobuf:"bytes,2,opt,name=CollectionId,proto3" json:"CollectionId,omitempty"`
	DocumentId   string    `protobuf:"bytes,3,opt,name=DocumentId,proto3" json:"DocumentId,omitempty"`
	LookupKey    []string  `protobuf:"bytes,4,rep,name=LookupKey,proto3" json:"LookupKey,omitempty"`
	Value        *AnyValue `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	MapKey       string    `protobuf:"bytes,6,opt,name=MapKey,proto3" json:"MapKey,omitempty"`
	Alias        string    `protobuf:"bytes,7,opt,name=Alias,proto3" json:"Alias,omitempty"`
	// To ignore Version, set it to -1
	DocumentVersionExpected int64         `protobuf:"varint,9,opt,name=DocumentVersionExpected,proto3" json:"DocumentVersionExpected,omitempty"`
	FieldVersionExpected    int64         `protobuf:"varint,10,opt,name=FieldVersionExpected,proto3" json:"FieldVersionExpected,omitempty"`
	OnFail                  OnFailOption  `protobuf:"varint,11,opt,name=OnFail,proto3,enum=kvstore.OnFailOption" json:"OnFail,omitempty"`
	CreateOption            *CreateOption `protobuf:"bytes,12,opt,name=CreateOption,proto3" json:"CreateOption,omitempty"`
}

func (x *AnyOp) Reset() {
	*x = AnyOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyOp) ProtoMessage() {}

func (x *AnyOp) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyOp.ProtoReflect.Descriptor instead.
func (*AnyOp) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{5}
}

func (x *AnyOp) GetType() OpType {
	if x != nil {
		return x.Type
	}
	return OpType_Get
}

func (x *AnyOp) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *AnyOp) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *AnyOp) GetLookupKey() []string {
	if x != nil {
		return x.LookupKey
	}
	return nil
}

func (x *AnyOp) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AnyOp) GetMapKey() string {
	if x != nil {
		return x.MapKey
	}
	return ""
}

func (x *AnyOp) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AnyOp) GetDocumentVersionExpected() int64 {
	if x != nil {
		return x.DocumentVersionExpected
	}
	return 0
}

func (x *AnyOp) GetFieldVersionExpected() int64 {
	if x != nil {
		return x.FieldVersionExpected
	}
	return 0
}

func (x *AnyOp) GetOnFail() OnFailOption {
	if x != nil {
		return x.OnFail
	}
	return OnFailOption_Rollback
}

func (x *AnyOp) GetCreateOption() *CreateOption {
	if x != nil {
		return x.CreateOption
	}
	return nil
}

type AnyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ValueType            `protobuf:"varint,1,opt,name=Type,proto3,enum=kvstore.ValueType" json:"Type,omitempty"`
	List    []*AnyValue          `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
	Map     map[string]*AnyValue `protobuf:"bytes,3,rep,name=Map,proto3" json:"Map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Str     string               `protobuf:"bytes,4,opt,name=Str,proto3" json:"Str,omitempty"`
	Num     int64                `protobuf:"varint,5,opt,name=Num,proto3" json:"Num,omitempty"`
	Alias   string               `protobuf:"bytes,10,opt,name=Alias,proto3" json:"Alias,omitempty"`
	Version int64                `protobuf:"varint,11,opt,name=Version,proto3" json:"Version,omitempty"`
	Bin     []byte               `protobuf:"bytes,31,opt,name=Bin,proto3" json:"Bin,omitempty"`
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{6}
}

func (x *AnyValue) GetType() ValueType {
	if x != nil {
		return x.Type
	}
	return ValueType_String
}

func (x *AnyValue) GetList() []*AnyValue {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AnyValue) GetMap() map[string]*AnyValue {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *AnyValue) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *AnyValue) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AnyValue) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AnyValue) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AnyValue) GetBin() []byte {
	if x != nil {
		return x.Bin
	}
	return nil
}

type CreateOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseRandomUniqueId bool `protobuf:"varint,1,opt,name=UseRandomUniqueId,proto3" json:"UseRandomUniqueId,omitempty"`
	ErrIfExists       bool `protobuf:"varint,2,opt,name=ErrIfExists,proto3" json:"ErrIfExists,omitempty"`
}

func (x *CreateOption) Reset() {
	*x = CreateOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOption) ProtoMessage() {}

func (x *CreateOption) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOption.ProtoReflect.Descriptor instead.
func (*CreateOption) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{7}
}

func (x *CreateOption) GetUseRandomUniqueId() bool {
	if x != nil {
		return x.UseRandomUniqueId
	}
	return false
}

func (x *CreateOption) GetErrIfExists() bool {
	if x != nil {
		return x.ErrIfExists
	}
	return false
}

type AliasValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNull bool      `protobuf:"varint,1,opt,name=IsNull,proto3" json:"IsNull,omitempty"`
	Value  *AnyValue `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *AliasValue) Reset() {
	*x = AliasValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliasValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliasValue) ProtoMessage() {}

func (x *AliasValue) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliasValue.ProtoReflect.Descriptor instead.
func (*AliasValue) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{8}
}

func (x *AliasValue) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

func (x *AliasValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type TransactionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId int64                        `protobuf:"varint,1,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	Status        TransactionResult_StatusCode `protobuf:"varint,2,opt,name=Status,proto3,enum=kvstore.TransactionResult_StatusCode" json:"Status,omitempty"`
	Values        map[string]*AliasValue       `protobuf:"bytes,3,rep,name=Values,proto3" json:"Values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Message       string                       `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	TableVersion  int64                        `protobuf:"varint,5,opt,name=TableVersion,proto3" json:"TableVersion,omitempty"`
}

func (x *TransactionResult) Reset() {
	*x = TransactionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvstore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult) ProtoMessage() {}

func (x *TransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_kvstore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult.ProtoReflect.Descriptor instead.
func (*TransactionResult) Descriptor() ([]byte, []int) {
	return file_kvstore_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionResult) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *TransactionResult) GetStatus() TransactionResult_StatusCode {
	if x != nil {
		return x.Status
	}
	return TransactionResult_OK
}

func (x *TransactionResult) GetValues() map[string]*AliasValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TransactionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransactionResult) GetTableVersion() int64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

var File_kvstore_proto protoreflect.FileDescriptor

var file_kvstore_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x5f, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4e,
	0x70, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x48, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x4e, 0x70, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x76,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x87, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x4b, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x12, 0x4a, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x4f, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x79, 0x4f, 0x70, 0x52, 0x03, 0x4f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x78, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x54, 0x78, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xbd, 0x03, 0x0a, 0x05,
	0x41, 0x6e, 0x79, 0x4f, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x12, 0x39, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x08,
	0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x53, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x42, 0x69, 0x6e, 0x1a, 0x49, 0x0a, 0x08, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x49, 0x66, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x72, 0x72, 0x49, 0x66,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x0a, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe1, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3e, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4e,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98,
	0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x1f, 0x2a, 0xd2, 0x01, 0x0a, 0x06, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x75, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1f, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x6f, 0x53, 0x74, 0x72, 0x48, 0x61, 0x73, 0x68, 0x10, 0x7f, 0x2a, 0x60,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10,
	0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x1f,
	0x2a, 0x35, 0x0a, 0x0c, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x10, 0x02, 0x32, 0x8e, 0x01, 0x0a, 0x0a, 0x4b, 0x56, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x50, 0x43, 0x12, 0x42, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x19, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x17, 0x2e, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x64, 0x68, 0x32, 0x31, 0x2f, 0x64, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x6b, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_kvstore_proto_rawDescOnce sync.Once
	file_kvstore_proto_rawDescData = file_kvstore_proto_rawDesc
)

func file_kvstore_proto_rawDescGZIP() []byte {
	file_kvstore_proto_rawDescOnce.Do(func() {
		file_kvstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_kvstore_proto_rawDescData)
	})
	return file_kvstore_proto_rawDescData
}

var file_kvstore_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kvstore_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kvstore_proto_goTypes = []interface{}{
	(OpType)(0),                       // 0: kvstore.OpType
	(ValueType)(0),                    // 1: kvstore.ValueType
	(OnFailOption)(0),                 // 2: kvstore.OnFailOption
	(TransactionResult_StatusCode)(0), // 3: kvstore.TransactionResult.StatusCode
	(*BatchReadArgs)(nil),             // 4: kvstore.BatchReadArgs
	(*BatchReadReply)(nil),            // 5: kvstore.BatchReadReply
	(*BatchSubmitArgs)(nil),           // 6: kvstore.BatchSubmitArgs
	(*BatchSubmitReply)(nil),          // 7: kvstore.BatchSubmitReply
	(*Transaction)(nil),               // 8: kvstore.Transaction
	(*AnyOp)(nil),                     // 9: kvstore.AnyOp
	(*AnyValue)(nil),                  // 10: kvstore.AnyValue
	(*CreateOption)(nil),              // 11: kvstore.CreateOption
	(*AliasValue)(nil),                // 12: kvstore.AliasValue
	(*TransactionResult)(nil),         // 13: kvstore.TransactionResult
	nil,                               // 14: kvstore.AnyValue.MapEntry
	nil,                               // 15: kvstore.TransactionResult.ValuesEntry
}
var file_kvstore_proto_depIdxs = []int32{
	8,  // 0: kvstore.BatchReadArgs.Transactions:type_name -> kvstore.Transaction
	13, // 1: kvstore.BatchReadReply.Results:type_name -> kvstore.TransactionResult
	8,  // 2: kvstore.BatchSubmitArgs.Transactions:type_name -> kvstore.Transaction
	13, // 3: kvstore.BatchSubmitReply.TransactionResults:type_name -> kvstore.TransactionResult
	9,  // 4: kvstore.Transaction.Ops:type_name -> kvstore.AnyOp
	0,  // 5: kvstore.AnyOp.Type:type_name -> kvstore.OpType
	10, // 6: kvstore.AnyOp.Value:type_name -> kvstore.AnyValue
	2,  // 7: kvstore.AnyOp.OnFail:type_name -> kvstore.OnFailOption
	11, // 8: kvstore.AnyOp.CreateOption:type_name -> kvstore.CreateOption
	1,  // 9: kvstore.AnyValue.Type:type_name -> kvstore.ValueType
	10, // 10: kvstore.AnyValue.List:type_name -> kvstore.AnyValue
	14, // 11: kvstore.AnyValue.Map:type_name -> kvstore.AnyValue.MapEntry
	10, // 12: kvstore.AliasValue.Value:type_name -> kvstore.AnyValue
	3,  // 13: kvstore.TransactionResult.Status:type_name -> kvstore.TransactionResult.StatusCode
	15, // 14: kvstore.TransactionResult.Values:type_name -> kvstore.TransactionResult.ValuesEntry
	10, // 15: kvstore.AnyValue.MapEntry.value:type_name -> kvstore.AnyValue
	12, // 16: kvstore.TransactionResult.ValuesEntry.value:type_name -> kvstore.AliasValue
	6,  // 17: kvstore.KVStoreRPC.BatchSubmit:input_type -> kvstore.BatchSubmitArgs
	4,  // 18: kvstore.KVStoreRPC.BatchRead:input_type -> kvstore.BatchReadArgs
	7,  // 19: kvstore.KVStoreRPC.BatchSubmit:output_type -> kvstore.BatchSubmitReply
	5,  // 20: kvstore.KVStoreRPC.BatchRead:output_type -> kvstore.BatchReadReply
	19, // [19:21] is the sub-list for method output_type
	17, // [17:19] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_kvstore_proto_init() }
func file_kvstore_proto_init() {
	if File_kvstore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kvstore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchReadArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchReadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSubmitArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSubmitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliasValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvstore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kvstore_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kvstore_proto_goTypes,
		DependencyIndexes: file_kvstore_proto_depIdxs,
		EnumInfos:         file_kvstore_proto_enumTypes,
		MessageInfos:      file_kvstore_proto_msgTypes,
	}.Build()
	File_kvstore_proto = out.File
	file_kvstore_proto_rawDesc = nil
	file_kvstore_proto_goTypes = nil
	file_kvstore_proto_depIdxs = nil
}
